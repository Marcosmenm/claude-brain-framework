# Docker CI/CD Example Workflow
# Framework: Any (containerized application)
# Strategy: Container-based deployment with Docker Compose

name: Docker CI/CD

on:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy_staging:
    if: github.ref == 'refs/heads/main'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/staging

            # Pull latest images
            docker compose pull

            # Zero-downtime deployment
            docker compose up -d --no-deps --build app

            # Health check
            sleep 10
            docker compose exec app curl -f http://localhost:3000/health || exit 1

            # Cleanup old images
            docker image prune -f

  deploy_production:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/production

            # Update docker-compose.yml with new version
            sed -i "s/image: .*/image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}/" docker-compose.yml

            # Pull new image
            docker compose pull app

            # Rolling update (zero downtime)
            docker compose up -d --scale app=2 --no-recreate
            sleep 30
            docker compose up -d --scale app=1 --remove-orphans

            # Run migrations (if needed)
            docker compose exec app npm run migrate

            # Health check
            docker compose exec app curl -f http://localhost:3000/health || exit 1

            # Cleanup
            docker image prune -f

      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/production
            docker compose down
            docker compose up -d
