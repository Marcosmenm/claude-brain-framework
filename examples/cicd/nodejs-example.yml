# Node.js CI/CD Example Workflow
# Framework: Express.js / Node.js API
# Strategy: Trunk-Based Development (main → staging, tags → production)

name: Node.js CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            dist/
            node_modules/
            package.json
            package-lock.json

  deploy_staging:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/staging

            # Pull latest code
            git pull origin main

            # Install dependencies
            npm ci --production

            # Run database migrations (if using Knex/Sequelize)
            npx knex migrate:latest

            # Restart PM2
            pm2 restart staging-api

            # Health check
            sleep 5
            curl -f http://localhost:3000/health || pm2 restart staging-api

  deploy_production:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/production

            # Create release directory
            RELEASE_DIR="releases/$(date +%Y%m%d%H%M%S)"
            mkdir -p $RELEASE_DIR

            # Copy current code
            cp -r current/* $RELEASE_DIR/

            # Pull latest tag
            cd $RELEASE_DIR
            git fetch --tags
            git checkout ${{ github.ref_name }}

            # Install dependencies
            npm ci --production

            # Run migrations
            npx knex migrate:latest

            # Zero-downtime switch
            ln -sfn $RELEASE_DIR /var/www/production/current

            # Reload PM2 gracefully
            pm2 reload production-api --update-env

            # Keep last 5 releases
            cd /var/www/production/releases
            ls -dt * | tail -n +6 | xargs rm -rf

      - name: Health Check
        run: |
          sleep 10
          curl -f https://api.your-domain.com/health || exit 1

      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/production
            PREVIOUS=$(ls -dt releases/* | sed -n '2p')
            ln -sfn $PREVIOUS /var/www/production/current
            pm2 reload production-api
